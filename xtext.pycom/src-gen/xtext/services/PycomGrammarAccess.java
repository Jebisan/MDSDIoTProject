/*
 * generated by Xtext 2.17.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PycomGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoardsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoardsBoardParserRuleCall_0_0 = (RuleCall)cBoardsAssignment_0.eContents().get(0);
		private final Assignment cServersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServersServerParserRuleCall_1_0 = (RuleCall)cServersAssignment_1.eContents().get(0);
		
		//System:
		//	boards+=Board* servers+=Server*;
		@Override public ParserRule getRule() { return rule; }
		
		//boards+=Board* servers+=Server*
		public Group getGroup() { return cGroup; }
		
		//boards+=Board*
		public Assignment getBoardsAssignment_0() { return cBoardsAssignment_0; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_0_0() { return cBoardsBoardParserRuleCall_0_0; }
		
		//servers+=Server*
		public Assignment getServersAssignment_1() { return cServersAssignment_1; }
		
		//Server
		public RuleCall getServersServerParserRuleCall_1_0() { return cServersServerParserRuleCall_1_0; }
	}
	public class ServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Server");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConnConnectionParserRuleCall_3_0 = (RuleCall)cConnAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpsConditionalActionParserRuleCall_6_0 = (RuleCall)cExpsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Server:
		//	'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//conn=Connection
		public Assignment getConnAssignment_3() { return cConnAssignment_3; }
		
		//Connection
		public RuleCall getConnConnectionParserRuleCall_3_0() { return cConnConnectionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//exps+=ConditionalAction*
		public Assignment getExpsAssignment_6() { return cExpsAssignment_6; }
		
		//ConditionalAction
		public RuleCall getExpsConditionalActionParserRuleCall_6_0() { return cExpsConditionalActionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHostAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHostHostParserRuleCall_0_0 = (RuleCall)cHostAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortnumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortnumberPortParserRuleCall_2_0 = (RuleCall)cPortnumberAssignment_2.eContents().get(0);
		
		//Connection:
		//	host=Host ',' portnumber=Port;
		@Override public ParserRule getRule() { return rule; }
		
		//host=Host ',' portnumber=Port
		public Group getGroup() { return cGroup; }
		
		//host=Host
		public Assignment getHostAssignment_0() { return cHostAssignment_0; }
		
		//Host
		public RuleCall getHostHostParserRuleCall_0_0() { return cHostHostParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//portnumber=Port
		public Assignment getPortnumberAssignment_2() { return cPortnumberAssignment_2; }
		
		//Port
		public RuleCall getPortnumberPortParserRuleCall_2_0() { return cPortnumberPortParserRuleCall_2_0; }
	}
	public class HostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Host");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIpAdrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIpAdrIpaddressParserRuleCall_0_0 = (RuleCall)cIpAdrAssignment_0.eContents().get(0);
		private final Assignment cWebsiteAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWebsiteSTRINGTerminalRuleCall_1_0 = (RuleCall)cWebsiteAssignment_1.eContents().get(0);
		
		//Host:
		//	ipAdr=Ipaddress | website=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ipAdr=Ipaddress | website=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ipAdr=Ipaddress
		public Assignment getIpAdrAssignment_0() { return cIpAdrAssignment_0; }
		
		//Ipaddress
		public RuleCall getIpAdrIpaddressParserRuleCall_0_0() { return cIpAdrIpaddressParserRuleCall_0_0; }
		
		//website=STRING
		public Assignment getWebsiteAssignment_1() { return cWebsiteAssignment_1; }
		
		//STRING
		public RuleCall getWebsiteSTRINGTerminalRuleCall_1_0() { return cWebsiteSTRINGTerminalRuleCall_1_0; }
	}
	public class IpaddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Ipaddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Ipaddress:
		//	INT '.' INT '.' INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT '.' INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Port");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Port:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoardMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoardMembersBoardMemberParserRuleCall_3_0 = (RuleCall)cBoardMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Board:
		//	'Board' name=ID '{' boardMembers+=BoardMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Board' name=ID '{' boardMembers+=BoardMember* '}'
		public Group getGroup() { return cGroup; }
		
		//'Board'
		public Keyword getBoardKeyword_0() { return cBoardKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//boardMembers+=BoardMember*
		public Assignment getBoardMembersAssignment_3() { return cBoardMembersAssignment_3; }
		
		//BoardMember
		public RuleCall getBoardMembersBoardMemberParserRuleCall_3_0() { return cBoardMembersBoardMemberParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoardMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.BoardMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommunicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoardMember:
		//	Sensor | Actuator | Communication;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator | Communication
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
		
		//Communication
		public RuleCall getCommunicationParserRuleCall_2() { return cCommunicationParserRuleCall_2; }
	}
	public class ConditionalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ConditionalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeIfKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cExpMembersAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cExpMembersExpMemberParserRuleCall_0_5_0 = (RuleCall)cExpMembersAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeWhileKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpMembersAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpMembersExpMemberParserRuleCall_1_5_0 = (RuleCall)cExpMembersAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//ConditionalAction:
		//	type='if' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}' | type='while' '(' condition=Condition ')' '{'
		//	ExpMembers+=ExpMember* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//type='if' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}' | type='while' '(' condition=Condition ')' '{'
		//ExpMembers+=ExpMember* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='if' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//type='if'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//'if'
		public Keyword getTypeIfKeyword_0_0_0() { return cTypeIfKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_2_0() { return cConditionConditionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }
		
		//ExpMembers+=ExpMember*
		public Assignment getExpMembersAssignment_0_5() { return cExpMembersAssignment_0_5; }
		
		//ExpMember
		public RuleCall getExpMembersExpMemberParserRuleCall_0_5_0() { return cExpMembersExpMemberParserRuleCall_0_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }
		
		//type='while' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//type='while'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//'while'
		public Keyword getTypeWhileKeyword_1_0_0() { return cTypeWhileKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_2_0() { return cConditionConditionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//ExpMembers+=ExpMember*
		public Assignment getExpMembersAssignment_1_5() { return cExpMembersAssignment_1_5; }
		
		//ExpMember
		public RuleCall getExpMembersExpMemberParserRuleCall_1_5_0() { return cExpMembersExpMemberParserRuleCall_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class ExpMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ExpMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpMember:
		//	Function | ConditionalAction;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | ConditionalAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//ConditionalAction
		public RuleCall getConditionalActionParserRuleCall_1() { return cConditionalActionParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_1_0 = (RuleCall)cSensorTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_2_1_0 = (RuleCall)cSensorTypesAssignment_2_1.eContents().get(0);
		
		//Sensor:
		//	'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_1() { return cSensorTypesAssignment_1; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_1_0() { return cSensorTypesSensorTypeParserRuleCall_1_0; }
		
		//(',' sensorTypes+=SensorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_2_1() { return cSensorTypesAssignment_2_1; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_2_1_0() { return cSensorTypesSensorTypeParserRuleCall_2_1_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActuatorTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActuatorTypesActuatorTypeParserRuleCall_1_0 = (RuleCall)cActuatorTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActuatorTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActuatorTypesActuatorTypeParserRuleCall_2_1_0 = (RuleCall)cActuatorTypesAssignment_2_1.eContents().get(0);
		
		//Actuator:
		//	'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*
		public Group getGroup() { return cGroup; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//actuatorTypes+=ActuatorType
		public Assignment getActuatorTypesAssignment_1() { return cActuatorTypesAssignment_1; }
		
		//ActuatorType
		public RuleCall getActuatorTypesActuatorTypeParserRuleCall_1_0() { return cActuatorTypesActuatorTypeParserRuleCall_1_0; }
		
		//(',' actuatorTypes+=ActuatorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//actuatorTypes+=ActuatorType
		public Assignment getActuatorTypesAssignment_2_1() { return cActuatorTypesAssignment_2_1; }
		
		//ActuatorType
		public RuleCall getActuatorTypesActuatorTypeParserRuleCall_2_1_0() { return cActuatorTypesActuatorTypeParserRuleCall_2_1_0; }
	}
	public class CommunicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Communication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommunicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeWiFiKeyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeBluetoothKeyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeSigFoxKeyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		
		//Communication:
		//	'Communication' ':' type=('WiFi' | 'Bluetooth' | 'SigFox');
		@Override public ParserRule getRule() { return rule; }
		
		//'Communication' ':' type=('WiFi' | 'Bluetooth' | 'SigFox')
		public Group getGroup() { return cGroup; }
		
		//'Communication'
		public Keyword getCommunicationKeyword_0() { return cCommunicationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=('WiFi' | 'Bluetooth' | 'SigFox')
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//('WiFi' | 'Bluetooth' | 'SigFox')
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//'WiFi'
		public Keyword getTypeWiFiKeyword_2_0_0() { return cTypeWiFiKeyword_2_0_0; }
		
		//'Bluetooth'
		public Keyword getTypeBluetoothKeyword_2_0_1() { return cTypeBluetoothKeyword_2_0_1; }
		
		//'SigFox'
		public Keyword getTypeSigFoxKeyword_2_0_2() { return cTypeSigFoxKeyword_2_0_2; }
	}
	public class ActuatorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameActuatorNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_4_1_0 = (RuleCall)cPinsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ActuatorType ModuleType:
		//	{ActuatorType} typeName=ActuatorName ':' name=ID ('(' pins=Pin ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActuatorType} typeName=ActuatorName ':' name=ID ('(' pins=Pin ')')?
		public Group getGroup() { return cGroup; }
		
		//{ActuatorType}
		public Action getActuatorTypeAction_0() { return cActuatorTypeAction_0; }
		
		//typeName=ActuatorName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//ActuatorName
		public RuleCall getTypeNameActuatorNameParserRuleCall_1_0() { return cTypeNameActuatorNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' pins=Pin ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//pins=Pin
		public Assignment getPinsAssignment_4_1() { return cPinsAssignment_4_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_4_1_0() { return cPinsPinParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameSensorNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_4_1_0 = (RuleCall)cPinsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//SensorType ModuleType:
		//	{SensorType} typeName=SensorName ':' name=ID ('(' pins=Pin ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SensorType} typeName=SensorName ':' name=ID ('(' pins=Pin ')')?
		public Group getGroup() { return cGroup; }
		
		//{SensorType}
		public Action getSensorTypeAction_0() { return cSensorTypeAction_0; }
		
		//typeName=SensorName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//SensorName
		public RuleCall getTypeNameSensorNameParserRuleCall_1_0() { return cTypeNameSensorNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' pins=Pin ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//pins=Pin
		public Assignment getPinsAssignment_4_1() { return cPinsAssignment_4_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_4_1_0() { return cPinsPinParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class SensorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.SensorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLightKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTemperatureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBarometerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHumidityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAccelerometerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//SensorName:
		//	'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer';
		@Override public ParserRule getRule() { return rule; }
		
		//'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Light'
		public Keyword getLightKeyword_0() { return cLightKeyword_0; }
		
		//'Temperature'
		public Keyword getTemperatureKeyword_1() { return cTemperatureKeyword_1; }
		
		//'Barometer'
		public Keyword getBarometerKeyword_2() { return cBarometerKeyword_2; }
		
		//'Humidity'
		public Keyword getHumidityKeyword_3() { return cHumidityKeyword_3; }
		
		//'Accelerometer'
		public Keyword getAccelerometerKeyword_4() { return cAccelerometerKeyword_4; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Pin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPowerPinNameParserRuleCall_0_0 = (RuleCall)cPowerAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputPinNameParserRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		
		//Pin:
		//	power=PinName ',' input=PinName;
		@Override public ParserRule getRule() { return rule; }
		
		//power=PinName ',' input=PinName
		public Group getGroup() { return cGroup; }
		
		//power=PinName
		public Assignment getPowerAssignment_0() { return cPowerAssignment_0; }
		
		//PinName
		public RuleCall getPowerPinNameParserRuleCall_0_0() { return cPowerPinNameParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//input=PinName
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//PinName
		public RuleCall getInputPinNameParserRuleCall_2_0() { return cInputPinNameParserRuleCall_2_0; }
	}
	public class PinNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.PinName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PinName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ActuatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ActuatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLEDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEngineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ActuatorName:
		//	'LED' | 'Engine';
		@Override public ParserRule getRule() { return rule; }
		
		//'LED' | 'Engine'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LED'
		public Keyword getLEDKeyword_0() { return cLEDKeyword_0; }
		
		//'Engine'
		public Keyword getEngineKeyword_1() { return cEngineKeyword_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLogicExAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLogicExLogicExpParserRuleCall_0_0 = (RuleCall)cLogicExAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLogicExAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicExLogicExpParserRuleCall_1_0_0 = (RuleCall)cLogicExAssignment_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cNestedConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNestedConditionConditionParserRuleCall_1_2_0 = (RuleCall)cNestedConditionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cLogicExAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLogicExLogicExpParserRuleCall_2_0_0 = (RuleCall)cLogicExAssignment_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_2_1_0 = (Keyword)cOperatorAssignment_2_1.eContents().get(0);
		private final Assignment cNestedConditionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNestedConditionConditionParserRuleCall_2_2_0 = (RuleCall)cNestedConditionAssignment_2_2.eContents().get(0);
		
		//Condition:
		//	logicEx=LogicExp | logicEx=LogicExp operator='&&' nestedCondition=Condition | logicEx=LogicExp operator='||'
		//	nestedCondition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//logicEx=LogicExp | logicEx=LogicExp operator='&&' nestedCondition=Condition | logicEx=LogicExp operator='||'
		//nestedCondition=Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//logicEx=LogicExp
		public Assignment getLogicExAssignment_0() { return cLogicExAssignment_0; }
		
		//LogicExp
		public RuleCall getLogicExLogicExpParserRuleCall_0_0() { return cLogicExLogicExpParserRuleCall_0_0; }
		
		//logicEx=LogicExp operator='&&' nestedCondition=Condition
		public Group getGroup_1() { return cGroup_1; }
		
		//logicEx=LogicExp
		public Assignment getLogicExAssignment_1_0() { return cLogicExAssignment_1_0; }
		
		//LogicExp
		public RuleCall getLogicExLogicExpParserRuleCall_1_0_0() { return cLogicExLogicExpParserRuleCall_1_0_0; }
		
		//operator='&&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }
		
		//nestedCondition=Condition
		public Assignment getNestedConditionAssignment_1_2() { return cNestedConditionAssignment_1_2; }
		
		//Condition
		public RuleCall getNestedConditionConditionParserRuleCall_1_2_0() { return cNestedConditionConditionParserRuleCall_1_2_0; }
		
		//logicEx=LogicExp operator='||' nestedCondition=Condition
		public Group getGroup_2() { return cGroup_2; }
		
		//logicEx=LogicExp
		public Assignment getLogicExAssignment_2_0() { return cLogicExAssignment_2_0; }
		
		//LogicExp
		public RuleCall getLogicExLogicExpParserRuleCall_2_0_0() { return cLogicExLogicExpParserRuleCall_2_0_0; }
		
		//operator='||'
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }
		
		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_2_1_0() { return cOperatorVerticalLineVerticalLineKeyword_2_1_0; }
		
		//nestedCondition=Condition
		public Assignment getNestedConditionAssignment_2_2() { return cNestedConditionAssignment_2_2; }
		
		//Condition
		public RuleCall getNestedConditionConditionParserRuleCall_2_2_0() { return cNestedConditionConditionParserRuleCall_2_2_0; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.LogicExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolValBooleanParserRuleCall_0_0 = (RuleCall)cBoolValAssignment_0.eContents().get(0);
		private final Assignment cCompExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompExpComparisonExpParserRuleCall_1_0 = (RuleCall)cCompExpAssignment_1.eContents().get(0);
		
		//LogicExp:
		//	boolVal=Boolean | compExp=ComparisonExp;
		@Override public ParserRule getRule() { return rule; }
		
		//boolVal=Boolean | compExp=ComparisonExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolVal=Boolean
		public Assignment getBoolValAssignment_0() { return cBoolValAssignment_0; }
		
		//Boolean
		public RuleCall getBoolValBooleanParserRuleCall_0_0() { return cBoolValBooleanParserRuleCall_0_0; }
		
		//compExp=ComparisonExp
		public Assignment getCompExpAssignment_1() { return cCompExpAssignment_1; }
		
		//ComparisonExp
		public RuleCall getCompExpComparisonExpParserRuleCall_1_0() { return cCompExpComparisonExpParserRuleCall_1_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//Boolean:
		//	value='true' | value='false';
		@Override public ParserRule getRule() { return rule; }
		
		//value='true' | value='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value='true'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//value='false'
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'false'
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }
	}
	public class ComparisonExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ComparisonExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//ComparisonExp:
		//	left=Expression op=Operator right=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Expression op=Operator right=Expression
		public Group getGroup() { return cGroup; }
		
		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }
		
		//op=Operator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_0() { return cOpOperatorParserRuleCall_1_0; }
		
		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOutputValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOutputValueINTTerminalRuleCall_0_0 = (RuleCall)cOutputValueAssignment_0.eContents().get(0);
		private final Assignment cOutputfunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOutputfunctionFunctionParserRuleCall_1_0 = (RuleCall)cOutputfunctionAssignment_1.eContents().get(0);
		
		//Expression:
		//	outputValue=INT | outputfunction=Function;
		@Override public ParserRule getRule() { return rule; }
		
		//outputValue=INT | outputfunction=Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//outputValue=INT
		public Assignment getOutputValueAssignment_0() { return cOutputValueAssignment_0; }
		
		//INT
		public RuleCall getOutputValueINTTerminalRuleCall_0_0() { return cOutputValueINTTerminalRuleCall_0_0; }
		
		//outputfunction=Function
		public Assignment getOutputfunctionAssignment_1() { return cOutputfunctionAssignment_1; }
		
		//Function
		public RuleCall getOutputfunctionFunctionParserRuleCall_1_0() { return cOutputfunctionFunctionParserRuleCall_1_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//	'<' | '<=' | '==' | '>=' | '>' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '<=' | '==' | '>=' | '>' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Number");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Number:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBoardAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cBoardBoardCrossReference_1_0_0 = (CrossReference)cBoardAssignment_1_0.eContents().get(0);
		private final RuleCall cBoardBoardIDTerminalRuleCall_1_0_0_1 = (RuleCall)cBoardBoardCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFunctionNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_1_2_0 = (RuleCall)cFunctionNameAssignment_1_2.eContents().get(0);
		
		//Function:
		//	ModuleFunction | board=[Board] '.' functionName=FunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//ModuleFunction | board=[Board] '.' functionName=FunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModuleFunction
		public RuleCall getModuleFunctionParserRuleCall_0() { return cModuleFunctionParserRuleCall_0; }
		
		//board=[Board] '.' functionName=FunctionName
		public Group getGroup_1() { return cGroup_1; }
		
		//board=[Board]
		public Assignment getBoardAssignment_1_0() { return cBoardAssignment_1_0; }
		
		//[Board]
		public CrossReference getBoardBoardCrossReference_1_0_0() { return cBoardBoardCrossReference_1_0_0; }
		
		//ID
		public RuleCall getBoardBoardIDTerminalRuleCall_1_0_0_1() { return cBoardBoardIDTerminalRuleCall_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//functionName=FunctionName
		public Assignment getFunctionNameAssignment_1_2() { return cFunctionNameAssignment_1_2; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_1_2_0() { return cFunctionNameFunctionNameParserRuleCall_1_2_0; }
	}
	public class ModuleFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.ModuleFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBoardBoardCrossReference_0_0 = (CrossReference)cBoardAssignment_0.eContents().get(0);
		private final RuleCall cBoardBoardIDTerminalRuleCall_0_0_1 = (RuleCall)cBoardBoardCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModuleTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModuleTypeModuleTypeCrossReference_2_0 = (CrossReference)cModuleTypeAssignment_2.eContents().get(0);
		private final RuleCall cModuleTypeModuleTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cModuleTypeModuleTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionNameFunctionNameParserRuleCall_4_0 = (RuleCall)cFunctionNameAssignment_4.eContents().get(0);
		
		//ModuleFunction:
		//	board=[Board] '.' moduleType=[ModuleType] '.' functionName=FunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//board=[Board] '.' moduleType=[ModuleType] '.' functionName=FunctionName
		public Group getGroup() { return cGroup; }
		
		//board=[Board]
		public Assignment getBoardAssignment_0() { return cBoardAssignment_0; }
		
		//[Board]
		public CrossReference getBoardBoardCrossReference_0_0() { return cBoardBoardCrossReference_0_0; }
		
		//ID
		public RuleCall getBoardBoardIDTerminalRuleCall_0_0_1() { return cBoardBoardIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//moduleType=[ModuleType]
		public Assignment getModuleTypeAssignment_2() { return cModuleTypeAssignment_2; }
		
		//[ModuleType]
		public CrossReference getModuleTypeModuleTypeCrossReference_2_0() { return cModuleTypeModuleTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getModuleTypeModuleTypeIDTerminalRuleCall_2_0_1() { return cModuleTypeModuleTypeIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//functionName=FunctionName
		public Assignment getFunctionNameAssignment_4() { return cFunctionNameAssignment_4; }
		
		//FunctionName
		public RuleCall getFunctionNameFunctionNameParserRuleCall_4_0() { return cFunctionNameFunctionNameParserRuleCall_4_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.Pycom.FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final SystemElements pSystem;
	private final ServerElements pServer;
	private final ConnectionElements pConnection;
	private final HostElements pHost;
	private final IpaddressElements pIpaddress;
	private final PortElements pPort;
	private final BoardElements pBoard;
	private final BoardMemberElements pBoardMember;
	private final ConditionalActionElements pConditionalAction;
	private final ExpMemberElements pExpMember;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final CommunicationElements pCommunication;
	private final ActuatorTypeElements pActuatorType;
	private final SensorTypeElements pSensorType;
	private final SensorNameElements pSensorName;
	private final PinElements pPin;
	private final PinNameElements pPinName;
	private final ActuatorNameElements pActuatorName;
	private final ConditionElements pCondition;
	private final LogicExpElements pLogicExp;
	private final BooleanElements pBoolean;
	private final ComparisonExpElements pComparisonExp;
	private final ExpressionElements pExpression;
	private final OperatorElements pOperator;
	private final NumberElements pNumber;
	private final FunctionElements pFunction;
	private final ModuleFunctionElements pModuleFunction;
	private final FunctionNameElements pFunctionName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PycomGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pServer = new ServerElements();
		this.pConnection = new ConnectionElements();
		this.pHost = new HostElements();
		this.pIpaddress = new IpaddressElements();
		this.pPort = new PortElements();
		this.pBoard = new BoardElements();
		this.pBoardMember = new BoardMemberElements();
		this.pConditionalAction = new ConditionalActionElements();
		this.pExpMember = new ExpMemberElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pCommunication = new CommunicationElements();
		this.pActuatorType = new ActuatorTypeElements();
		this.pSensorType = new SensorTypeElements();
		this.pSensorName = new SensorNameElements();
		this.pPin = new PinElements();
		this.pPinName = new PinNameElements();
		this.pActuatorName = new ActuatorNameElements();
		this.pCondition = new ConditionElements();
		this.pLogicExp = new LogicExpElements();
		this.pBoolean = new BooleanElements();
		this.pComparisonExp = new ComparisonExpElements();
		this.pExpression = new ExpressionElements();
		this.pOperator = new OperatorElements();
		this.pNumber = new NumberElements();
		this.pFunction = new FunctionElements();
		this.pModuleFunction = new ModuleFunctionElements();
		this.pFunctionName = new FunctionNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.Pycom".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	boards+=Board* servers+=Server*;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Server:
	//	'Server' name=ID '(' conn=Connection ')' '{' exps+=ConditionalAction* '}';
	public ServerElements getServerAccess() {
		return pServer;
	}
	
	public ParserRule getServerRule() {
		return getServerAccess().getRule();
	}
	
	//Connection:
	//	host=Host ',' portnumber=Port;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Host:
	//	ipAdr=Ipaddress | website=STRING;
	public HostElements getHostAccess() {
		return pHost;
	}
	
	public ParserRule getHostRule() {
		return getHostAccess().getRule();
	}
	
	//Ipaddress:
	//	INT '.' INT '.' INT '.' INT;
	public IpaddressElements getIpaddressAccess() {
		return pIpaddress;
	}
	
	public ParserRule getIpaddressRule() {
		return getIpaddressAccess().getRule();
	}
	
	//Port:
	//	INT;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Board:
	//	'Board' name=ID '{' boardMembers+=BoardMember* '}';
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//BoardMember:
	//	Sensor | Actuator | Communication;
	public BoardMemberElements getBoardMemberAccess() {
		return pBoardMember;
	}
	
	public ParserRule getBoardMemberRule() {
		return getBoardMemberAccess().getRule();
	}
	
	//ConditionalAction:
	//	type='if' '(' condition=Condition ')' '{' ExpMembers+=ExpMember* '}' | type='while' '(' condition=Condition ')' '{'
	//	ExpMembers+=ExpMember* '}';
	public ConditionalActionElements getConditionalActionAccess() {
		return pConditionalAction;
	}
	
	public ParserRule getConditionalActionRule() {
		return getConditionalActionAccess().getRule();
	}
	
	//ExpMember:
	//	Function | ConditionalAction;
	public ExpMemberElements getExpMemberAccess() {
		return pExpMember;
	}
	
	public ParserRule getExpMemberRule() {
		return getExpMemberAccess().getRule();
	}
	
	//Sensor:
	//	'Sensor' sensorTypes+=SensorType (',' sensorTypes+=SensorType)*;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator:
	//	'Actuator' actuatorTypes+=ActuatorType (',' actuatorTypes+=ActuatorType)*;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Communication:
	//	'Communication' ':' type=('WiFi' | 'Bluetooth' | 'SigFox');
	public CommunicationElements getCommunicationAccess() {
		return pCommunication;
	}
	
	public ParserRule getCommunicationRule() {
		return getCommunicationAccess().getRule();
	}
	
	//ActuatorType ModuleType:
	//	{ActuatorType} typeName=ActuatorName ':' name=ID ('(' pins=Pin ')')?;
	public ActuatorTypeElements getActuatorTypeAccess() {
		return pActuatorType;
	}
	
	public ParserRule getActuatorTypeRule() {
		return getActuatorTypeAccess().getRule();
	}
	
	//SensorType ModuleType:
	//	{SensorType} typeName=SensorName ':' name=ID ('(' pins=Pin ')')?;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//SensorName:
	//	'Light' | 'Temperature' | 'Barometer' | 'Humidity' | 'Accelerometer';
	public SensorNameElements getSensorNameAccess() {
		return pSensorName;
	}
	
	public ParserRule getSensorNameRule() {
		return getSensorNameAccess().getRule();
	}
	
	//Pin:
	//	power=PinName ',' input=PinName;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//PinName:
	//	name=ID;
	public PinNameElements getPinNameAccess() {
		return pPinName;
	}
	
	public ParserRule getPinNameRule() {
		return getPinNameAccess().getRule();
	}
	
	//ActuatorName:
	//	'LED' | 'Engine';
	public ActuatorNameElements getActuatorNameAccess() {
		return pActuatorName;
	}
	
	public ParserRule getActuatorNameRule() {
		return getActuatorNameAccess().getRule();
	}
	
	//Condition:
	//	logicEx=LogicExp | logicEx=LogicExp operator='&&' nestedCondition=Condition | logicEx=LogicExp operator='||'
	//	nestedCondition=Condition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//LogicExp:
	//	boolVal=Boolean | compExp=ComparisonExp;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//Boolean:
	//	value='true' | value='false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//ComparisonExp:
	//	left=Expression op=Operator right=Expression;
	public ComparisonExpElements getComparisonExpAccess() {
		return pComparisonExp;
	}
	
	public ParserRule getComparisonExpRule() {
		return getComparisonExpAccess().getRule();
	}
	
	//Expression:
	//	outputValue=INT | outputfunction=Function;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Operator:
	//	'<' | '<=' | '==' | '>=' | '>' | '!=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Number:
	//	INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Function:
	//	ModuleFunction | board=[Board] '.' functionName=FunctionName;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//ModuleFunction:
	//	board=[Board] '.' moduleType=[ModuleType] '.' functionName=FunctionName;
	public ModuleFunctionElements getModuleFunctionAccess() {
		return pModuleFunction;
	}
	
	public ParserRule getModuleFunctionRule() {
		return getModuleFunctionAccess().getRule();
	}
	
	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
