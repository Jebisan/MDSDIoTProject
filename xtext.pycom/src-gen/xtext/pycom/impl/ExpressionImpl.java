/**
 * generated by Xtext 2.17.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.pycom.Expression;
import xtext.pycom.Function;
import xtext.pycom.PycomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.ExpressionImpl#getOutputValue <em>Output Value</em>}</li>
 *   <li>{@link xtext.pycom.impl.ExpressionImpl#getOutputfunction <em>Outputfunction</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The default value of the '{@link #getOutputValue() <em>Output Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputValue()
   * @generated
   * @ordered
   */
  protected static final int OUTPUT_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getOutputValue() <em>Output Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputValue()
   * @generated
   * @ordered
   */
  protected int outputValue = OUTPUT_VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutputfunction() <em>Outputfunction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputfunction()
   * @generated
   * @ordered
   */
  protected Function outputfunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getOutputValue()
  {
    return outputValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutputValue(int newOutputValue)
  {
    int oldOutputValue = outputValue;
    outputValue = newOutputValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.EXPRESSION__OUTPUT_VALUE, oldOutputValue, outputValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function getOutputfunction()
  {
    return outputfunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutputfunction(Function newOutputfunction, NotificationChain msgs)
  {
    Function oldOutputfunction = outputfunction;
    outputfunction = newOutputfunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.EXPRESSION__OUTPUTFUNCTION, oldOutputfunction, newOutputfunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutputfunction(Function newOutputfunction)
  {
    if (newOutputfunction != outputfunction)
    {
      NotificationChain msgs = null;
      if (outputfunction != null)
        msgs = ((InternalEObject)outputfunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.EXPRESSION__OUTPUTFUNCTION, null, msgs);
      if (newOutputfunction != null)
        msgs = ((InternalEObject)newOutputfunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.EXPRESSION__OUTPUTFUNCTION, null, msgs);
      msgs = basicSetOutputfunction(newOutputfunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.EXPRESSION__OUTPUTFUNCTION, newOutputfunction, newOutputfunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PycomPackage.EXPRESSION__OUTPUTFUNCTION:
        return basicSetOutputfunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.EXPRESSION__OUTPUT_VALUE:
        return getOutputValue();
      case PycomPackage.EXPRESSION__OUTPUTFUNCTION:
        return getOutputfunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.EXPRESSION__OUTPUT_VALUE:
        setOutputValue((Integer)newValue);
        return;
      case PycomPackage.EXPRESSION__OUTPUTFUNCTION:
        setOutputfunction((Function)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.EXPRESSION__OUTPUT_VALUE:
        setOutputValue(OUTPUT_VALUE_EDEFAULT);
        return;
      case PycomPackage.EXPRESSION__OUTPUTFUNCTION:
        setOutputfunction((Function)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.EXPRESSION__OUTPUT_VALUE:
        return outputValue != OUTPUT_VALUE_EDEFAULT;
      case PycomPackage.EXPRESSION__OUTPUTFUNCTION:
        return outputfunction != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (outputValue: ");
    result.append(outputValue);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
