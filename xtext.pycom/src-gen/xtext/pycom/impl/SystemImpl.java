/**
 * generated by Xtext 2.17.0
 */
package xtext.pycom.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.pycom.Board;
import xtext.pycom.PycomPackage;
import xtext.pycom.Server;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.SystemImpl#getBoards <em>Boards</em>}</li>
 *   <li>{@link xtext.pycom.impl.SystemImpl#getServers <em>Servers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemImpl extends MinimalEObjectImpl.Container implements xtext.pycom.System
{
  /**
   * The cached value of the '{@link #getBoards() <em>Boards</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoards()
   * @generated
   * @ordered
   */
  protected EList<Board> boards;

  /**
   * The cached value of the '{@link #getServers() <em>Servers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServers()
   * @generated
   * @ordered
   */
  protected EList<Server> servers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Board> getBoards()
  {
    if (boards == null)
    {
      boards = new EObjectContainmentEList<Board>(Board.class, this, PycomPackage.SYSTEM__BOARDS);
    }
    return boards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Server> getServers()
  {
    if (servers == null)
    {
      servers = new EObjectContainmentEList<Server>(Server.class, this, PycomPackage.SYSTEM__SERVERS);
    }
    return servers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PycomPackage.SYSTEM__BOARDS:
        return ((InternalEList<?>)getBoards()).basicRemove(otherEnd, msgs);
      case PycomPackage.SYSTEM__SERVERS:
        return ((InternalEList<?>)getServers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.SYSTEM__BOARDS:
        return getBoards();
      case PycomPackage.SYSTEM__SERVERS:
        return getServers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.SYSTEM__BOARDS:
        getBoards().clear();
        getBoards().addAll((Collection<? extends Board>)newValue);
        return;
      case PycomPackage.SYSTEM__SERVERS:
        getServers().clear();
        getServers().addAll((Collection<? extends Server>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.SYSTEM__BOARDS:
        getBoards().clear();
        return;
      case PycomPackage.SYSTEM__SERVERS:
        getServers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.SYSTEM__BOARDS:
        return boards != null && !boards.isEmpty();
      case PycomPackage.SYSTEM__SERVERS:
        return servers != null && !servers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SystemImpl
