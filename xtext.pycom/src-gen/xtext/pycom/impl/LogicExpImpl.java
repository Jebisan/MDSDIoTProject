/**
 * generated by Xtext 2.17.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.pycom.ComparisonExp;
import xtext.pycom.LogicExp;
import xtext.pycom.PycomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logic Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.LogicExpImpl#getBoolVal <em>Bool Val</em>}</li>
 *   <li>{@link xtext.pycom.impl.LogicExpImpl#getCompExp <em>Comp Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicExpImpl extends MinimalEObjectImpl.Container implements LogicExp
{
  /**
   * The cached value of the '{@link #getBoolVal() <em>Bool Val</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolVal()
   * @generated
   * @ordered
   */
  protected xtext.pycom.Boolean boolVal;

  /**
   * The cached value of the '{@link #getCompExp() <em>Comp Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompExp()
   * @generated
   * @ordered
   */
  protected ComparisonExp compExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.LOGIC_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public xtext.pycom.Boolean getBoolVal()
  {
    return boolVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBoolVal(xtext.pycom.Boolean newBoolVal, NotificationChain msgs)
  {
    xtext.pycom.Boolean oldBoolVal = boolVal;
    boolVal = newBoolVal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.LOGIC_EXP__BOOL_VAL, oldBoolVal, newBoolVal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoolVal(xtext.pycom.Boolean newBoolVal)
  {
    if (newBoolVal != boolVal)
    {
      NotificationChain msgs = null;
      if (boolVal != null)
        msgs = ((InternalEObject)boolVal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.LOGIC_EXP__BOOL_VAL, null, msgs);
      if (newBoolVal != null)
        msgs = ((InternalEObject)newBoolVal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.LOGIC_EXP__BOOL_VAL, null, msgs);
      msgs = basicSetBoolVal(newBoolVal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.LOGIC_EXP__BOOL_VAL, newBoolVal, newBoolVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExp getCompExp()
  {
    return compExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompExp(ComparisonExp newCompExp, NotificationChain msgs)
  {
    ComparisonExp oldCompExp = compExp;
    compExp = newCompExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.LOGIC_EXP__COMP_EXP, oldCompExp, newCompExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompExp(ComparisonExp newCompExp)
  {
    if (newCompExp != compExp)
    {
      NotificationChain msgs = null;
      if (compExp != null)
        msgs = ((InternalEObject)compExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.LOGIC_EXP__COMP_EXP, null, msgs);
      if (newCompExp != null)
        msgs = ((InternalEObject)newCompExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.LOGIC_EXP__COMP_EXP, null, msgs);
      msgs = basicSetCompExp(newCompExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.LOGIC_EXP__COMP_EXP, newCompExp, newCompExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PycomPackage.LOGIC_EXP__BOOL_VAL:
        return basicSetBoolVal(null, msgs);
      case PycomPackage.LOGIC_EXP__COMP_EXP:
        return basicSetCompExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.LOGIC_EXP__BOOL_VAL:
        return getBoolVal();
      case PycomPackage.LOGIC_EXP__COMP_EXP:
        return getCompExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.LOGIC_EXP__BOOL_VAL:
        setBoolVal((xtext.pycom.Boolean)newValue);
        return;
      case PycomPackage.LOGIC_EXP__COMP_EXP:
        setCompExp((ComparisonExp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.LOGIC_EXP__BOOL_VAL:
        setBoolVal((xtext.pycom.Boolean)null);
        return;
      case PycomPackage.LOGIC_EXP__COMP_EXP:
        setCompExp((ComparisonExp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.LOGIC_EXP__BOOL_VAL:
        return boolVal != null;
      case PycomPackage.LOGIC_EXP__COMP_EXP:
        return compExp != null;
    }
    return super.eIsSet(featureID);
  }

} //LogicExpImpl
